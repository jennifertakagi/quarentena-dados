# -*- coding: utf-8 -*-
"""QuarentenaDados - aula03 - Jennifer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yXd05hiGfE_-T4Oore0fHHGIbXeQUzN8
"""

import pandas as pd
imdb = pd.read_csv("https://gist.githubusercontent.com/guilhermesilveira/24e271e68afe8fd257911217b88b2e07/raw/e70287fb1dcaad4215c3f3c9deda644058a616bc/movie_metadata.csv")
imdb.head()

imdb["color"].unique()

imdb["color"].value_counts()

imdb["color"].value_counts(normalize=True)

imdb["director_name"].value_counts()

imdb["num_critic_for_reviews"]

imdb["num_critic_for_reviews"].describe()

import seaborn as sns
sns.set_style("whitegrid")
imdb["num_critic_for_reviews"].plot(kind="hist")

imdb["gross"].hist()

imdb.sort_values("gross", ascending=False).head()

color_or_bw = imdb.query("color in ['Color', ' Black and White']")
color_or_bw["color_0_ou_1"] = (color_or_bw["color"]=="Color") * 1
color_or_bw["color_0_ou_1"].value_counts()

color_or_bw.head()

sns.scatterplot(data=color_or_bw, x="color_0_ou_1", y="gross")

color_or_bw.groupby("color").mean()["gross"]

color_or_bw.groupby("color").mean()["imdb_score"]

color_or_bw.groupby("color").median()["imdb_score"]

budget_gross=  imdb[["budget", "gross"]].dropna().query("budget >0 | gross > 0")

sns.scatterplot(x="budget", y="gross", data = budget_gross)

imdb.sort_values("budget", ascending=False).head()

imdb["country"].unique()

imdb = imdb.drop_duplicates()
imdb_usa = imdb.query("country == 'USA'")
imdb_usa.sort_values("budget", ascending=False).head()

budget_gross = imdb_usa[["budget", "gross"]].dropna().query("budget >0 | gross > 0")

sns.scatterplot(x="budget", y="gross", data = budget_gross)

imdb_usa["lucro"] = imdb_usa["gross"] - imdb_usa["budget"]

budget_gross = imdb_usa.query("budget >0 | gross > 0")[["budget", "lucro"]].dropna()

sns.scatterplot(x="budget", y="lucro", data = budget_gross)

budget_gross = imdb_usa.query("budget >0 | gross > 0")[["title_year", "lucro"]].dropna()

sns.scatterplot(x="title_year", y="lucro", data = budget_gross)

filmes_por_diretor = imdb_usa["director_name"].value_counts()
gross_director = imdb_usa[["director_name", "gross"]].set_index("director_name").join(filmes_por_diretor, on="director_name")
gross_director.columns=["dindin", "filmes_irmaos"]
gross_director = gross_director.reset_index()
gross_director.head()

sns.scatterplot(x="filmes_irmaos", y="dindin", data = gross_director)

sns.pairplot(data = imdb_usa[["gross", "budget", "lucro", "title_year"]])

imdb_usa[["gross", "budget", "lucro", "title_year"]].corr()

"""## Desafio 1 do [Thiago Gonçalves](https://twitter.com/tgcsantos)

Plotar e analisar o Boxplot da média (coluna imbd_score) dos filmes em preto e branco e coloridos.
"""

sns.boxplot(x="color", y="imdb_score", data=color_or_bw)

"""##Desafio 2 do [Guilherme Silveira](https://twitter.com/guilhermecaelum)

No gráfico de **budget por lucro** temos um ponto com muito custo e prejuizo, descubra com é esse filme (budget próximo de 2.5).
"""

imdb_usa.sort_values("lucro").head(1)["movie_title"]

"""##Desafio 3 do [Guilherme Silveira](https://twitter.com/guilhermecaelum)


Em aula falamos que talvez, filmes mais recentes podem ter prejuizo pois ainda não tiveram tempo de recuperar o investimento. Analise essas informações e nos conte quais foram suas conclusões.
"""

imdb_usa.query('budget > 0 and gross > 0').sort_values("title_year", ascending=False).head(20)[["movie_title", "lucro", "title_year"]]

lucros_ano = imdb_usa[["title_year", "lucro"]].dropna()

sns.scatterplot(x="title_year", y="lucro", data=lucros_ano)

"""## Desafio 4 do [Paulo Silveira](https://twitter.com/paulo_caelum)

Quais foram os filmes da decada pré 2° guerra que tiveram muito lucro.
"""

pre_guerra = imdb_usa.query("title_year < 1940").sort_values("lucro", ascending=False).dropna()
pre_guerra[["movie_title", "lucro"]].head(2)

"""## Desafio 5 do [Paulo Silveira](https://twitter.com/paulo_caelum)

No gráfico de **filmes_irmaos por dindin** temos alguns pontos estranhos entre 15 e 20. Confirme a tese genial do Paulo que o cidadão estranho é o Woody Allen. (Se ele tiver errado pode cornete nas redes sociais kkkkk)
"""

gross_director.drop_duplicates('director_name').query('filmes_irmaos == 18')

"""## Desafio 6 do [Thiago Gonçalves](https://twitter.com/tgcsantos)


Calcular a correlação apenas dos filmes pós anos 2000 (Jogar fora filmes antes de 2000) e interpretar essa correlação.
"""

filmes_depois_de_2000 = imdb_usa.query('title_year >= 2000')
filmes_depois_de_2000[["gross", "budget", "lucro", "title_year"]].corr()

#Maior correlação entre variáveis quando o valor for mais perto de 1.0 (100%).
#- Receita Bruta e Despesa de produção do filme: forte correlação (~ 70,9%)
#- Receita Bruta e Lucro: forte correlação(~ 77,0%)
#- Receita Bruta e Ano de Lançamento: baixíssma correlação (~ 10,5%)
#- Despesa de produção e Lucro: baixíssma correlação (~ 9,73%)
#- Despesa de produção e Ano de Lançamento: baixíssma correlação (~ 5,85%)
#- Lucro e Ano de Lançamento: baixíssma correlação (~ 3,50%)

"""## Desafio 7 do [Allan Spadini](https://twitter.com/allanspadini)

Tentar encontrar uma reta, pode ser com uma régua no monitor (não faça isso), com o excel/google sheets, com o python, no gráfico que parece se aproximar com uma reta (por exemplo budget/lucro, gross/lucro)
"""

sns.pairplot(imdb_usa, y_vars="lucro", x_vars=["budget", "gross"], height=5, kind="reg")

"""## Desafio 8 da [Thais André](https://twitter.com/thais_tandre)

Analisar e interpretar a correlação de outras variáveis além das feitas em sala (notas é uma boa). Número de avaliações por ano pode ser também uma feature.
"""

votos_por_ano = imdb_usa.groupby("title_year")["num_voted_users"].mean()
imdb_usa_votos_por_ano = imdb_usa.join(votos_por_ano, on="title_year", rsuffix="rs")
imdb_usa_votos_por_ano.rename(columns={"num_voted_usersrs": "votos_por_ano"}, inplace=True)
imdb_usa_votos_por_ano.head()

imdb_usa_votos_por_ano[["title_year", "votos_por_ano"]].corr()

sns.scatterplot(x="title_year", y="votos_por_ano", data=imdb_usa_votos_por_ano)
